#SingleInstance force

; #NoEnv
:*:ytdlp::python -m yt_dlp --extract-audio --audio-format mp3{space}
SetTitleMatchMode 2
;SetKeyDelay(200)
setCapsLockState("AlwaysOff")
capslock & -::ß
capslock & =::é
SC056 & m::sendInput("1")
SC056 & ,::sendInput("2")
SC056 & .::sendInput("3")
SC056 & j::sendInput("4")
SC056 & k::sendInput("5")
SC056 & l::sendInput("6")
SC056 & u::sendInput("7")
SC056 & i::sendInput("8")
SC056 & o::sendInput("9")
SC056 & space::sendInput("0")

blocked := 0

f1::
{
    global blocked
    if(blocked)
    {
        r := msgBox("Keep blocked?", , 1)
        if(r == "Cancel"){
            blocked := 0
            sendInput("{lwin up}{tab up}{alt up}")
        }
    }
    else
    {
        blocked := 1
    }
    return
}

#HotIf (blocked == 1)
!tab::
{
    return
}
#HotIf


#HotIf (blocked == 1)
~LWin::
{
    sendInput("{vkE8}")
return
}
#HotIf


capslock & n::
{
    sendInput("{escape}{escape}")
    sleep(50)
    sendInput("{escape}{enter}")
    sendInput("Idisplay(")
    sleep(50)
    sendInput("{escape}A)")
    sleep(250)
    sendInput("^{enter}{enter}")
    return
}

^enter::
{
    sendInput("^{enter}{sleep 40}{enter}")
    return
}
capslock & .::
{
    if winActive("Visual Studio Code") && winActive(".ipynb"){
        sendInput("^{enter}{enter}")
    }
    else
    {
        sendInput("{enter}")
    }
    return
}

capslock & j::
{
    if(getKeyState("shift", "p"))
    {
        sendInput("{shift down}{down}{shift down}")
    }
    else
    {
        sendInput("{down}")
    }
}

capslock & k::
{
    if getKeyState("shift", "p")
    {
        sendInput("{shift down}{up}{shift up}")
    }
    else
    {
        sendInput("{up}")
    }
}

capslock & h::
{
    if getKeyState("shift", "p")
    {
        sendInput("{shift down}{left}{shift left}")
    }
    else
    {
        sendInput("{left}")
    }
}
capslock & l::
{
    if getKeyState("shift", "p") {
        sendInput("{shift down}{right}{shift right}")
    }
    else
    {
        sendInput("{right}")
    }
}
capslock & m::sendInput("{enter}")
capslock & o::sendInput("{end}{enter}")
capslock & p::sendInput("{backspace}")
capslock & i::sendInput("{end}")
capslock & a::sendInput("{home}")
capslock & '::
{
    if getKeyState("shift", "p") {
        sendInput("Ä")
    }
    else
    {
        sendInput("ä")
    }
}
capslock & `;::
{
    if getKeyState("shift", "p") {
        sendInput("Ö")
    }
    else
    {
        sendInput("ö")
    }
}
capslock & [::
{
    if getKeyState("shift", "p") {
        sendInput("Ü")
    }
    else
    {
        sendInput("ü")
    }
}
:*:cw::{control down}{shift down}{right}{shift up}{control up}^x

capslock up::
{
    sendInput("{escape}")
}


#space::toggleCurrentWindowOnTop()

!l::reloadScript()

^!`;::
{
    run("C:\Program Files\Everything\Everything.exe")
}


toggleCurrentWindowOnTop()
{
    ; winSet("AlwaysOnTop", "Toggle","A")
}

reloadScript()
{
    ;if winActive("AutoHotKey.ahk2")
    {
        sendInput("^s")
        sleep(20)
        ; msgbox("","","Reloaded!", 1)
        reload
    }
    return
}




getSelectedText()
{
    
}




;:c*:\alpha::α
;:c*:\beta::β
;:c*:\Gamma::Γ
;:c*:\gamma::γ
;:c*:\Delta::Δ
;:c*:\delta::δ
;:c*:\in::ϵ
;:c*:\epsilon::ε
;:c*:\zeta::ζ
;:c*:\eta::η
;:c*:\iota::ι
;:c*:\kappa::κ
;:c*:\varkappa::ϰ
;:c*:\Lambda::Λ
;:c*:\lambda::λ
;:c*:\mu::μ
;:c*:\nu::ν
;:c*:\Xi::Ξ
;:c*:\xi::ξ
;:c*:\Pi::Π
;:c*:\pi::π
;:c*:\varpi::ϖ
;:c*:\rho::ρ
;:c*:\varrho::ϱ
;:c*:\Sigma::Σ
;:c*:\sigma::σ
;:c*:\varsigma::ς
;:c*:\tau::τ
;:c*:\Theta::Θ
;:c*:\theta::θ
;:c*:\vartheta::ϑ
;:c*:\Upsilon::Υ
;:c*:\upsilon::υ
;:c*:\Phi::Φ
;:c*:\phi::ϕ
;:c*:\varphi::φ
;:c*:\chi::χ
;:c*:\Psi::Ψ
;:c*:\psi::ψ
;:c*:\Omega::Ω
;:c*:\omega::ω